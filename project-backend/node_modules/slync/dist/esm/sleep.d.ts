/**
 * Slync was inspired by atomic-sleep:
 * - https://www.npmjs.com/package/atomic-sleep
 *
 * It is written in TypeScript, and only accepts 'number' for the ms parameter,
 * whereas atomic-sleep also accepts 'bigint'.
 *
 * Slync will also determine which sleep method to use (atomic vs naive)
 * at runtime in case the global SharedBufferArray and Atomics changes.
 */
/**
 * Synchronously sleeps for the specified duration in milliseconds.
 *
 * @param {number} ms - The duration to sleep in milliseconds.
 * @throws {TypeError} If `ms` is not a number.
 * @throws {RangeError} If `ms` is not strictly above 0 and below Infinity.
 */
declare const slync: (ms: number) => void;
export default slync;
